diff -Naru /usr/local/cuda-9.0/samples/4_Finance/BlackScholes/BlackScholes.cu ap/BlackScholes.cu
--- /usr/local/cuda-9.0/samples/4_Finance/BlackScholes/BlackScholes.cu	2018-08-16 14:37:03.497764222 +0900
+++ ap/BlackScholes.cu	2018-08-22 22:32:26.992907811 +0900
@@ -19,43 +19,28 @@
 #include <helper_functions.h>   // helper functions for string parsing
 #include <helper_cuda.h>        // helper functions CUDA error checking and initialization
 
-////////////////////////////////////////////////////////////////////////////////
-// Process an array of optN options on CPU
-////////////////////////////////////////////////////////////////////////////////
-extern "C" void BlackScholesCPU(
-    float *h_CallResult,
-    float *h_PutResult,
-    float *h_StockPrice,
-    float *h_OptionStrike,
-    float *h_OptionYears,
-    float Riskfree,
-    float Volatility,
-    int optN
-);
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/time.h>
+#include <host_loop.h>
 
 ////////////////////////////////////////////////////////////////////////////////
 // Process an array of OptN options on GPU
 ////////////////////////////////////////////////////////////////////////////////
 #include "BlackScholes_kernel.cuh"
 
-////////////////////////////////////////////////////////////////////////////////
-// Helper function, returning uniformly distributed
-// random float in [low, high] range
-////////////////////////////////////////////////////////////////////////////////
-float RandFloat(float low, float high)
+static inline double time_diff(struct timeval tv_start, struct timeval tv_end)
 {
-    float t = (float)rand() / (float)RAND_MAX;
-    return (1.0f - t) * low + t * high;
+    return (double)(tv_end.tv_sec - tv_start.tv_sec) * 1000.0 + (double)(tv_end.tv_usec - tv_start.tv_usec) / 1000.0;
 }
 
 ////////////////////////////////////////////////////////////////////////////////
 // Data configuration
 ////////////////////////////////////////////////////////////////////////////////
-const int OPT_N = 4000000;
-const int  NUM_ITERATIONS = 512;
+const long  NUM_ITERATIONS = 1;
 
 
-const int          OPT_SZ = OPT_N * sizeof(float);
 const float      RISKFREE = 0.02f;
 const float    VOLATILITY = 0.30f;
 
@@ -66,186 +51,139 @@
 ////////////////////////////////////////////////////////////////////////////////
 int main(int argc, char **argv)
 {
+    long OPT_N;
+    size_t OPT_SZ;
+    char *folder;
+    char *filepath;
+
+    struct timeval tv_start, tv_end;
+    struct timeval tv_start_total, tv_end_total;
+    double total_time = 0;       // in ms
+    double kernel_time = 0;       // in ms
+
+    if (argc != 3)
+    {
+        fprintf(stderr, "Usage: %s <OPT_N> <folder>\n", argv[0]);
+        exit(EXIT_FAILURE);
+    }
+
+    OPT_N = atol(argv[1]);
+    OPT_SZ = (size_t)OPT_N * sizeof(float);
+    folder = argv[2];
+
+    filepath = (char *)malloc(sizeof(char) * (strlen(folder) + 128));
+    if (!filepath)
+    {
+        fprintf(stderr, "Cannot allocate filepath");
+        exit(EXIT_FAILURE);
+    }
+
     // Start logs
     printf("[%s] - Starting...\n", argv[0]);
 
-    //'h_' prefix - CPU (host) memory space
-    float
-    //Results calculated by CPU for reference
-    *h_CallResultCPU,
-    *h_PutResultCPU,
-    //CPU copy of GPU results
-    *h_CallResultGPU,
-    *h_PutResultGPU,
-    //CPU instance of input data
-    *h_StockPrice,
-    *h_OptionStrike,
-    *h_OptionYears;
-
     //'d_' prefix - GPU (device) memory space
-    float
+    char 
     //Results calculated by GPU
-    *d_CallResult,
-    *d_PutResult,
+    *fn_CallResult,
+    *fn_PutResult,
     //GPU instance of input data
-    *d_StockPrice,
-    *d_OptionStrike,
-    *d_OptionYears;
+    *fn_StockPrice,
+    *fn_OptionStrike,
+    *fn_OptionYears;
 
-    double
-    delta, ref, sum_delta, sum_ref, max_delta, L1norm, gpuTime;
+    long i;
 
-    StopWatchInterface *hTimer = NULL;
-    int i;
+    size_t path_len;
 
-    findCudaDevice(argc, (const char **)argv);
+    gettimeofday(&tv_start_total, NULL);
 
-    sdkCreateTimer(&hTimer);
+    volatile GPUGlobals *gpuGlobals;
+    initializer(&gpuGlobals);
 
     printf("Initializing data...\n");
-    printf("...allocating CPU memory for options.\n");
-    h_CallResultCPU = (float *)malloc(OPT_SZ);
-    h_PutResultCPU  = (float *)malloc(OPT_SZ);
-    h_CallResultGPU = (float *)malloc(OPT_SZ);
-    h_PutResultGPU  = (float *)malloc(OPT_SZ);
-    h_StockPrice    = (float *)malloc(OPT_SZ);
-    h_OptionStrike  = (float *)malloc(OPT_SZ);
-    h_OptionYears   = (float *)malloc(OPT_SZ);
-
     printf("...allocating GPU memory for options.\n");
-    checkCudaErrors(cudaMalloc((void **)&d_CallResult,   OPT_SZ));
-    checkCudaErrors(cudaMalloc((void **)&d_PutResult,    OPT_SZ));
-    checkCudaErrors(cudaMalloc((void **)&d_StockPrice,   OPT_SZ));
-    checkCudaErrors(cudaMalloc((void **)&d_OptionStrike, OPT_SZ));
-    checkCudaErrors(cudaMalloc((void **)&d_OptionYears,  OPT_SZ));
-
-    printf("...generating input data in CPU mem.\n");
-    srand(5347);
-
-    //Generate options set
-    for (i = 0; i < OPT_N; i++)
-    {
-        h_CallResultCPU[i] = 0.0f;
-        h_PutResultCPU[i]  = -1.0f;
-        h_StockPrice[i]    = RandFloat(5.0f, 30.0f);
-        h_OptionStrike[i]  = RandFloat(1.0f, 100.0f);
-        h_OptionYears[i]   = RandFloat(0.25f, 10.0f);
-    }
-
-    printf("...copying input data to GPU mem.\n");
-    //Copy options data to GPU memory for further processing
-    checkCudaErrors(cudaMemcpy(d_StockPrice,  h_StockPrice,   OPT_SZ, cudaMemcpyHostToDevice));
-    checkCudaErrors(cudaMemcpy(d_OptionStrike, h_OptionStrike,  OPT_SZ, cudaMemcpyHostToDevice));
-    checkCudaErrors(cudaMemcpy(d_OptionYears,  h_OptionYears,   OPT_SZ, cudaMemcpyHostToDevice));
-    printf("Data init done.\n\n");
 
+    sprintf(filepath, "%s/StockPrice.mem", folder);
+    path_len = (strlen(filepath) + 1) * sizeof(char);
+    checkCudaErrors(cudaMalloc(&fn_StockPrice, path_len));
+    checkCudaErrors(cudaMemcpy(fn_StockPrice, filepath, path_len, cudaMemcpyHostToDevice));
+
+    sprintf(filepath, "%s/OptionStrike.mem", folder);
+    path_len = (strlen(filepath) + 1) * sizeof(char);
+    checkCudaErrors(cudaMalloc(&fn_OptionStrike, path_len));
+    checkCudaErrors(cudaMemcpy(fn_OptionStrike, filepath, path_len, cudaMemcpyHostToDevice));
+
+    sprintf(filepath, "%s/OptionYears.mem", folder);
+    path_len = (strlen(filepath) + 1) * sizeof(char);
+    checkCudaErrors(cudaMalloc(&fn_OptionYears, path_len));
+    checkCudaErrors(cudaMemcpy(fn_OptionYears, filepath, path_len, cudaMemcpyHostToDevice));
+
+    sprintf(filepath, "%s/CallResultGPU.ap.mem", folder);
+    path_len = (strlen(filepath) + 1) * sizeof(char);
+    checkCudaErrors(cudaMalloc(&fn_CallResult, path_len));
+    checkCudaErrors(cudaMemcpy(fn_CallResult, filepath, path_len, cudaMemcpyHostToDevice));
+
+    sprintf(filepath, "%s/PutResultGPU.ap.mem", folder);
+    path_len = (strlen(filepath) + 1) * sizeof(char);
+    checkCudaErrors(cudaMalloc(&fn_PutResult, path_len));
+    checkCudaErrors(cudaMemcpy(fn_PutResult, filepath, path_len, cudaMemcpyHostToDevice));
 
     printf("Executing Black-Scholes GPU kernel (%i iterations)...\n", NUM_ITERATIONS);
     checkCudaErrors(cudaDeviceSynchronize());
-    sdkResetTimer(&hTimer);
-    sdkStartTimer(&hTimer);
 
+    gettimeofday(&tv_start, NULL);
     for (i = 0; i < NUM_ITERATIONS; i++)
     {
-        BlackScholesGPU<<<DIV_UP((OPT_N/2), 128), 128/*480, 128*/>>>(
-            (float2 *)d_CallResult,
-            (float2 *)d_PutResult,
-            (float2 *)d_StockPrice,
-            (float2 *)d_OptionStrike,
-            (float2 *)d_OptionYears,
+        fprintf(stderr, "%d / %d\n", i + 1, NUM_ITERATIONS);
+        BlackScholesGPU<<<DIV_UP((OPT_N/2), 128), 128/*480, 128*/, 0, gpuGlobals->streamMgr->kernelStream>>>(
+            fn_CallResult,
+            fn_PutResult,
+            fn_StockPrice,
+            fn_OptionStrike,
+            fn_OptionYears,
             RISKFREE,
             VOLATILITY,
             OPT_N
         );
         getLastCudaError("BlackScholesGPU() execution failed\n");
+        run_gpufs_handler(gpuGlobals, 0);
+        checkCudaErrors(cudaStreamSynchronize(gpuGlobals->streamMgr->kernelStream));
     }
 
-    checkCudaErrors(cudaDeviceSynchronize());
-    sdkStopTimer(&hTimer);
-    gpuTime = sdkGetTimerValue(&hTimer) / NUM_ITERATIONS;
+    gettimeofday(&tv_end, NULL);
+    kernel_time += time_diff(tv_start, tv_end);
 
-    //Both call and put is calculated
-    printf("Options count             : %i     \n", 2 * OPT_N);
-    printf("BlackScholesGPU() time    : %f msec\n", gpuTime);
-    printf("Effective memory bandwidth: %f GB/s\n", ((double)(5 * OPT_N * sizeof(float)) * 1E-9) / (gpuTime * 1E-3));
-    printf("Gigaoptions per second    : %f     \n\n", ((double)(2 * OPT_N) * 1E-9) / (gpuTime * 1E-3));
-
-    printf("BlackScholes, Throughput = %.4f GOptions/s, Time = %.5f s, Size = %u options, NumDevsUsed = %u, Workgroup = %u\n",
-           (((double)(2.0 * OPT_N) * 1.0E-9) / (gpuTime * 1.0E-3)), gpuTime*1e-3, (2 * OPT_N), 1, 128);
-
-    printf("\nReading back GPU results...\n");
-    //Read back GPU results to compare them to CPU results
-    checkCudaErrors(cudaMemcpy(h_CallResultGPU, d_CallResult, OPT_SZ, cudaMemcpyDeviceToHost));
-    checkCudaErrors(cudaMemcpy(h_PutResultGPU,  d_PutResult,  OPT_SZ, cudaMemcpyDeviceToHost));
-
-
-    printf("Checking the results...\n");
-    printf("...running CPU calculations.\n\n");
-    //Calculate options values on CPU
-    BlackScholesCPU(
-        h_CallResultCPU,
-        h_PutResultCPU,
-        h_StockPrice,
-        h_OptionStrike,
-        h_OptionYears,
-        RISKFREE,
-        VOLATILITY,
-        OPT_N
-    );
-
-    printf("Comparing the results...\n");
-    //Calculate max absolute difference and L1 distance
-    //between CPU and GPU results
-    sum_delta = 0;
-    sum_ref   = 0;
-    max_delta = 0;
-
-    for (i = 0; i < OPT_N; i++)
+    sprintf(filepath, "%s/CallResultGPU.ap.mem", folder);
+    if (truncate(filepath, OPT_SZ) != 0)
     {
-        ref   = h_CallResultCPU[i];
-        delta = fabs(h_CallResultCPU[i] - h_CallResultGPU[i]);
-
-        if (delta > max_delta)
-        {
-            max_delta = delta;
-        }
-
-        sum_delta += delta;
-        sum_ref   += fabs(ref);
+        fprintf(stderr, "Error: Cannot truncate %s\n", filepath);
+        exit(EXIT_FAILURE);
     }
 
-    L1norm = sum_delta / sum_ref;
-    printf("L1 norm: %E\n", L1norm);
-    printf("Max absolute error: %E\n\n", max_delta);
+    sprintf(filepath, "%s/PutResultGPU.ap.mem", folder);
+    if (truncate(filepath, OPT_SZ) != 0)
+    {
+        fprintf(stderr, "Error: Cannot truncate %s\n", filepath);
+        exit(EXIT_FAILURE);
+    }
 
     printf("Shutting down...\n");
     printf("...releasing GPU memory.\n");
-    checkCudaErrors(cudaFree(d_OptionYears));
-    checkCudaErrors(cudaFree(d_OptionStrike));
-    checkCudaErrors(cudaFree(d_StockPrice));
-    checkCudaErrors(cudaFree(d_PutResult));
-    checkCudaErrors(cudaFree(d_CallResult));
-
-    printf("...releasing CPU memory.\n");
-    free(h_OptionYears);
-    free(h_OptionStrike);
-    free(h_StockPrice);
-    free(h_PutResultGPU);
-    free(h_CallResultGPU);
-    free(h_PutResultCPU);
-    free(h_CallResultCPU);
-    sdkDeleteTimer(&hTimer);
+
+    checkCudaErrors(cudaFree(fn_CallResult));
+    checkCudaErrors(cudaFree(fn_PutResult));
+    checkCudaErrors(cudaFree(fn_StockPrice));
+    checkCudaErrors(cudaFree(fn_OptionStrike));
+    checkCudaErrors(cudaFree(fn_OptionYears));
+    free(filepath);
+
     printf("Shutdown done.\n");
 
-    printf("\n[BlackScholes] - Test Summary\n");
+    gettimeofday(&tv_end_total, NULL);
+    total_time += time_diff(tv_start_total, tv_end_total);
 
-    if (L1norm > 1e-6)
-    {
-        printf("Test failed!\n");
-        exit(EXIT_FAILURE);
-    }
+    printf("==> header: kernel_time (ms),total_time (ms)\n");
+    printf("==> data: %f,%f\n", kernel_time, total_time);
 
-    printf("\nNOTE: The CUDA Samples are not meant for performance measurements. Results may vary when GPU Boost is enabled.\n\n");
-    printf("Test passed\n");
     exit(EXIT_SUCCESS);
 }
diff -Naru /usr/local/cuda-9.0/samples/4_Finance/BlackScholes/BlackScholes_kernel.cuh ap/BlackScholes_kernel.cuh
--- /usr/local/cuda-9.0/samples/4_Finance/BlackScholes/BlackScholes_kernel.cuh	2018-08-16 14:37:03.497764222 +0900
+++ ap/BlackScholes_kernel.cuh	2018-08-22 22:32:26.993907811 +0900
@@ -9,7 +9,10 @@
  *
  */
 
+#include <fs_constants.h>
+#include <fs_calls.cu.h>
 
+#define TLB_SIZE 32
 
 ///////////////////////////////////////////////////////////////////////////////
 // Polynomial approximation of cumulative normal distribution function
@@ -72,14 +75,14 @@
 ////////////////////////////////////////////////////////////////////////////////
 __launch_bounds__(128)
 __global__ void BlackScholesGPU(
-    float2 * __restrict d_CallResult,
-    float2 * __restrict d_PutResult,
-    float2 * __restrict d_StockPrice,
-    float2 * __restrict d_OptionStrike,
-    float2 * __restrict d_OptionYears,
+    char *fn_CallResult,
+    char *fn_PutResult,
+    char *fn_StockPrice,
+    char *fn_OptionStrike,
+    char *fn_OptionYears,
     float Riskfree,
     float Volatility,
-    int optN
+    long optN
 )
 {
     ////Thread index
@@ -87,32 +90,71 @@
     ////Total number of threads in execution grid
     //const int THREAD_N = blockDim.x * gridDim.x;
 
-    const int opt = blockDim.x * blockIdx.x + threadIdx.x;
+    __shared__ TLB<TLB_SIZE> tlb_CallResult;
+    __shared__ TLB<TLB_SIZE> tlb_PutResult;
+    __shared__ TLB<TLB_SIZE> tlb_StockPrice;
+    __shared__ TLB<TLB_SIZE> tlb_OptionStrike;
+    __shared__ TLB<TLB_SIZE> tlb_OptionYears;
+
+    __shared__ int fd_CallResult;
+    __shared__ int fd_PutResult;
+    __shared__ int fd_StockPrice;
+    __shared__ int fd_OptionStrike;
+    __shared__ int fd_OptionYears;
+
+    const long opt = (long)blockDim.x * (long)blockIdx.x + (long)threadIdx.x;
 
      // Calculating 2 options per thread to increase ILP (instruction level parallelism)
     if (opt < (optN / 2))
     {
         float callResult1, callResult2;
         float putResult1, putResult2;
+
+        size_t opt_sz = (size_t)optN * sizeof(float);
+
+        fd_CallResult = gopen(fn_CallResult, O_GWRONCE);
+        fd_PutResult = gopen(fn_PutResult, O_GWRONCE);
+        fd_StockPrice = gopen(fn_StockPrice, O_GRDONLY);
+        fd_OptionStrike = gopen(fn_OptionStrike, O_GRDONLY);
+        fd_OptionYears = gopen(fn_OptionYears, O_GRDONLY);
+
+        FatPointer<float2, TLB_SIZE> d_CallResult = gvmmap<float2, TLB_SIZE>(NULL, opt_sz, 0, O_GWRONLY, fd_CallResult, 0, &tlb_CallResult);
+        FatPointer<float2, TLB_SIZE> d_PutResult = gvmmap<float2, TLB_SIZE>(NULL, opt_sz, 0, O_GWRONLY, fd_PutResult, 0, &tlb_PutResult);
+        FatPointer<volatile float2, TLB_SIZE> d_StockPrice = gvmmap<volatile float2, TLB_SIZE>(NULL, opt_sz, 0, O_GRDONLY, fd_StockPrice, 0, &tlb_StockPrice);
+        FatPointer<volatile float2, TLB_SIZE> d_OptionStrike = gvmmap<volatile float2, TLB_SIZE>(NULL, opt_sz, 0, O_GRDONLY, fd_OptionStrike, 0, &tlb_OptionStrike);
+        FatPointer<volatile float2, TLB_SIZE> d_OptionYears = gvmmap<volatile float2, TLB_SIZE>(NULL, opt_sz, 0, O_GRDONLY, fd_OptionYears, 0, &tlb_OptionYears);
+
+        d_CallResult += opt;
+        d_PutResult += opt;
+        d_StockPrice += opt;
+        d_OptionStrike += opt;
+        d_OptionYears += opt;
+
         BlackScholesBodyGPU(
             callResult1,
             putResult1,
-            d_StockPrice[opt].x,
-            d_OptionStrike[opt].x,
-            d_OptionYears[opt].x,
+            (*d_StockPrice).x,
+            (*d_OptionStrike).x,
+            (*d_OptionYears).x,
             Riskfree,
             Volatility
         );
         BlackScholesBodyGPU(
             callResult2,
             putResult2,
-            d_StockPrice[opt].y,
-            d_OptionStrike[opt].y,
-            d_OptionYears[opt].y,
+            (*d_StockPrice).y,
+            (*d_OptionStrike).y,
+            (*d_OptionYears).y,
             Riskfree,
             Volatility
         );
-        d_CallResult[opt] = make_float2(callResult1, callResult2);
-        d_PutResult[opt] = make_float2(putResult1, putResult2);
+        *d_CallResult = make_float2(callResult1, callResult2);
+        *d_PutResult = make_float2(putResult1, putResult2);
+
+        gclose(fd_CallResult);
+        gclose(fd_PutResult);
+        gclose(fd_StockPrice);
+        gclose(fd_OptionStrike);
+        gclose(fd_OptionYears);
 	 }
 }
diff -Naru /usr/local/cuda-9.0/samples/4_Finance/BlackScholes/Makefile ap/Makefile
--- /usr/local/cuda-9.0/samples/4_Finance/BlackScholes/Makefile	2018-08-16 14:37:03.829764118 +0900
+++ ap/Makefile	2018-08-22 22:32:26.993907811 +0900
@@ -148,7 +148,7 @@
     endif
 endif
 HOST_COMPILER ?= g++
-NVCC          := $(CUDA_PATH)/bin/nvcc -ccbin $(HOST_COMPILER)
+NVCC          := $(CUDA_PATH)/bin/nvcc -ccbin $(HOST_COMPILER) -std=c++11
 
 # internal flags
 NVCCFLAGS   := -m${TARGET_SIZE}
@@ -182,11 +182,6 @@
     endif
 endif
 
-ifeq ($(TARGET_OS),qnx)
-    CCFLAGS += -DWIN_INTERFACE_CUSTOM
-    LDFLAGS += -lsocket
-endif
-
 # Debug build flags
 ifeq ($(dbg),1)
       NVCCFLAGS += -g -G
@@ -203,19 +198,19 @@
 
 SAMPLE_ENABLED := 1
 
-ALL_LDFLAGS :=
+ALL_LDFLAGS := -L../../../../gpufs/libgpufs/release/ -lgpufs
 ALL_LDFLAGS += $(ALL_CCFLAGS)
 ALL_LDFLAGS += $(addprefix -Xlinker ,$(LDFLAGS))
 ALL_LDFLAGS += $(addprefix -Xlinker ,$(EXTRA_LDFLAGS))
 
 # Common includes and paths for CUDA
-INCLUDES  := -I../../common/inc
+INCLUDES  := -I../common/inc
 LIBRARIES :=
 
 ################################################################################
 
 # Gencode arguments
-SMS ?= 30 35 37 50 52 60 70
+SMS ?= 60
 
 ifeq ($(SMS),)
 $(info >>> WARNING - no SM architectures have been specified - waiving sample <<<)
@@ -254,21 +249,20 @@
 endif
 
 BlackScholes.o:BlackScholes.cu
-	$(EXEC) $(NVCC) $(INCLUDES) $(ALL_CCFLAGS) $(GENCODE_FLAGS) -o $@ -c $<
+	$(EXEC) $(NVCC) $(INCLUDES) $(ALL_CCFLAGS) $(GENCODE_FLAGS) -o $@ -c $< -dc
 
 BlackScholes_gold.o:BlackScholes_gold.cpp
 	$(EXEC) $(NVCC) $(INCLUDES) $(ALL_CCFLAGS) $(GENCODE_FLAGS) -o $@ -c $<
 
 BlackScholes: BlackScholes.o BlackScholes_gold.o
 	$(EXEC) $(NVCC) $(ALL_LDFLAGS) $(GENCODE_FLAGS) -o $@ $+ $(LIBRARIES)
-	$(EXEC) mkdir -p ../../bin/$(TARGET_ARCH)/$(TARGET_OS)/$(BUILD_TYPE)
-	$(EXEC) cp $@ ../../bin/$(TARGET_ARCH)/$(TARGET_OS)/$(BUILD_TYPE)
+	$(EXEC) mkdir -p bin
+	$(EXEC) mv $@ bin/
 
 run: build
 	$(EXEC) ./BlackScholes
 
 clean:
-	rm -f BlackScholes BlackScholes.o BlackScholes_gold.o
-	rm -rf ../../bin/$(TARGET_ARCH)/$(TARGET_OS)/$(BUILD_TYPE)/BlackScholes
+	rm -f bin/* *.o
 
 clobber: clean
diff -Naru /usr/local/cuda-9.0/samples/4_Finance/BlackScholes/NsightEclipse.xml ap/NsightEclipse.xml
--- /usr/local/cuda-9.0/samples/4_Finance/BlackScholes/NsightEclipse.xml	2018-08-16 14:37:03.498764222 +0900
+++ ap/NsightEclipse.xml	2018-08-22 22:32:26.993907811 +0900
@@ -31,13 +31,13 @@
     <scope>1:CUDA Basic Topics</scope>
     <scope>3:Computational Finance</scope>
   </scopes>
+  <sm-arch>sm20</sm-arch>
   <sm-arch>sm30</sm-arch>
   <sm-arch>sm35</sm-arch>
   <sm-arch>sm37</sm-arch>
   <sm-arch>sm50</sm-arch>
   <sm-arch>sm52</sm-arch>
   <sm-arch>sm60</sm-arch>
-  <sm-arch>sm70</sm-arch>
   <supported_envs>
     <env>
       <arch>x86_64</arch>
