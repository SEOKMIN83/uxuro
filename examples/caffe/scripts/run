#!/bin/env python

import argparse
import os
import os.path
import subprocess
import ctypes
import shutil
import time
import datetime

CWD = os.path.realpath(os.path.dirname(__file__))

def type_folder(path):
    if not os.path.isdir(path):
        raise argparse.ArgumentTypeError('The specified path "{}" does not exist'.format(path))
    return path

def parseargs():
    parser = argparse.ArgumentParser(
        description = 'Caffe run benchmark'
    )

    parser.add_argument(
        'experiment',
        choices = ('c3d', 'resnet',),
        help = 'Experiment name (c3d or resnet)'
    )

    parser.add_argument(
        'dfolder', type = type_folder,
        help = 'Data folder'
    )

    parser.add_argument(
        'rfolder', type = type_folder,
        help = 'Result folder'
    )

    parser.add_argument(
        '--log',
        type = argparse.FileType('w'),
        default = None,
        help = 'Log file'
    )

    parser.add_argument(
        '--prog',
        choices = ('original', 'uvm', 'nvmgpu', 'cpu', 'all',),
        default = 'all',
        help = 'Experiment to run (default: all)'
    )

    return parser.parse_args()

def load_original_driver():
    print('Loading original NVIDIA driver ...')
    subprocess.call([
        'rmmod',
        'nvidia-uvm',
    ])
    subprocess.check_call([
        'modprobe',
        'nvidia-uvm',
    ])

def load_nvmgpu_driver():
    print('Loading DRAGON driver ...')
    path = os.path.join(CWD, '../../../scripts/')
    exec_path = os.path.join(path, 'reinsert-mod')
    p = subprocess.Popen([exec_path,], cwd = path)
    retcode = p.wait()
    if retcode != 0:
        raise Exception("Cannot load DRAGON driver")

def clear_cache():
    print("Clearing page cache ...")
    subprocess.check_call([
        os.path.join(CWD, '../../../scripts/drop-caches'),
    ])

def clear_dmesg():
    print("Clearing dmesg ...")
    subprocess.check_call([
        'dmesg',
        '-C',
    ])

def sync_fs():
    print("Sync ...")
    subprocess.check_call([
        'sync',
    ])
    clear_cache()

def dump_dmesg(args):
    print("Dumping dmesg ...")
    subprocess.call(
        ['dmesg', '-t',],
        stdout = args.log,
        stderr = args.log,
    )

def run_c3d_original(args, caffe_bin):
    load_original_driver()

    data_folder = os.path.abspath(args.dfolder)

    prototxt_root_folder = os.path.join(CWD, '..', 'examples', 'c3d_ucf101_training')
    template_file_path = os.path.join(prototxt_root_folder, 'train_simple.prototxt.template')
    prototxt_file_path = os.path.join(prototxt_root_folder, 'train_simple.prototxt')

    with open(os.path.join(args.rfolder, 'result-original.data'), 'w') as result_file:
        result_file.write('length,total_time (s)\n')

        with open(template_file_path, 'r') as f:
            template_content = f.read()
            template_content = template_content.replace('{{ INPUT_LAYER_TYPE }}', 'DragonFreadData')

            for length in (12, 24, 36, 48, 60, 72, 84,):
                print('Benchmarking C3D original with video length {} ...'.format(length))
                prototxt_content = template_content.replace('{{ LENGTH }}', str(length))
                prototxt_content = prototxt_content.replace('{{ INPUT_TRAIN_DATA }}', os.path.join(data_folder, 'c3d-train-data-{}.mem'.format(length)))
                prototxt_content = prototxt_content.replace('{{ INPUT_TRAIN_LABEL }}', os.path.join(data_folder, 'c3d-train-label-{}.mem'.format(length)))

                with open(prototxt_file_path, 'w') as g:
                    g.write(prototxt_content)

                clear_dmesg()
                clear_cache()

                start_timestamp = datetime.datetime.now()
                retcode = subprocess.call(
                    [caffe_bin, 'train', '--solver=solver.prototxt',],
                    cwd = prototxt_root_folder,
                    stdout = args.log,
                    stderr = args.log
                )
                end_timestamp = datetime.datetime.now()

                if retcode == 0:
                    print('Success. Writing result ...')
                    result_file.write('{},{}\n'.format(length, (end_timestamp - start_timestamp).total_seconds()))
                else:
                    print('Fail. Maybe due to out-of-memory')

def run_c3d_uvm(args, caffe_bin):
    load_original_driver()

    data_folder = os.path.abspath(args.dfolder)

    prototxt_root_folder = os.path.join(CWD, '..', 'examples', 'c3d_ucf101_training')
    template_file_path = os.path.join(prototxt_root_folder, 'train_simple.prototxt.template')
    prototxt_file_path = os.path.join(prototxt_root_folder, 'train_simple.prototxt')

    with open(os.path.join(args.rfolder, 'result-uvm.data'), 'w') as result_file:
        result_file.write('length,total_time (s)\n')

        with open(template_file_path, 'r') as f:
            template_content = f.read()
            template_content = template_content.replace('{{ INPUT_LAYER_TYPE }}', 'DragonFreadData')

            for length in (12, 24, 36, 48, 60, 72, 84,):
                print('Benchmarking C3D UVM with video length {} ...'.format(length))
                prototxt_content = template_content.replace('{{ LENGTH }}', str(length))
                prototxt_content = prototxt_content.replace('{{ INPUT_TRAIN_DATA }}', os.path.join(data_folder, 'c3d-train-data-{}.mem'.format(length)))
                prototxt_content = prototxt_content.replace('{{ INPUT_TRAIN_LABEL }}', os.path.join(data_folder, 'c3d-train-label-{}.mem'.format(length)))

                with open(prototxt_file_path, 'w') as g:
                    g.write(prototxt_content)

                clear_dmesg()
                clear_cache()

                start_timestamp = datetime.datetime.now()
                retcode = subprocess.call(
                    [caffe_bin, 'train', '--solver=solver.prototxt', '--enable_uvm=true',],
                    cwd = prototxt_root_folder,
                    stdout = args.log,
                    stderr = args.log
                )
                end_timestamp = datetime.datetime.now()

                if retcode == 0:
                    print('Success. Writing result ...')
                    result_file.write('{},{}\n'.format(length, (end_timestamp - start_timestamp).total_seconds()))
                else:
                    print('Fail. Maybe due to out-of-memory')

def run_c3d_nvmgpu(args, caffe_bin):
    load_nvmgpu_driver()

    data_folder = os.path.abspath(args.dfolder)
    data_tmp_folder = os.path.join(data_folder, 'tmp')

    if not os.path.exists(data_tmp_folder):
        os.mkdir(data_tmp_folder)

    prototxt_root_folder = os.path.join(CWD, '..', 'examples', 'c3d_ucf101_training')
    template_file_path = os.path.join(prototxt_root_folder, 'train_simple.prototxt.template')
    prototxt_file_path = os.path.join(prototxt_root_folder, 'train_simple.prototxt')

    with open(os.path.join(args.rfolder, 'result-dragon.data'), 'w') as result_file:
        result_file.write('length,total_time (s)\n')

        with open(template_file_path, 'r') as f:
            template_content = f.read()
            template_content = template_content.replace('{{ INPUT_LAYER_TYPE }}', 'DragonData')

            for length in (12, 24, 36, 48, 60, 72, 84,):
                print('Benchmarking C3D DRAGON with video length {} ...'.format(length))
                prototxt_content = template_content.replace('{{ LENGTH }}', str(length))
                prototxt_content = prototxt_content.replace('{{ INPUT_TRAIN_DATA }}', os.path.join(data_folder, 'c3d-train-data-{}.mem'.format(length)))
                prototxt_content = prototxt_content.replace('{{ INPUT_TRAIN_LABEL }}', os.path.join(data_folder, 'c3d-train-label-{}.mem'.format(length)))

                with open(prototxt_file_path, 'w') as g:
                    g.write(prototxt_content)

                clear_dmesg()
                clear_cache()

                start_timestamp = datetime.datetime.now()
                retcode = subprocess.call(
                    [caffe_bin, 'train', '--solver=solver.prototxt', '--enable_dragon=true', '--dragon_tmp_folder={}'.format(data_tmp_folder)],
                    cwd = prototxt_root_folder,
                    stdout = args.log,
                    stderr = args.log
                )
                end_timestamp = datetime.datetime.now()

                dump_dmesg(args)

                if retcode == 0:
                    print('Success. Writing result ...')
                    result_file.write('{},{}\n'.format(length, (end_timestamp - start_timestamp).total_seconds()))
                else:
                    raise Exception('Fail. This should never happen!!!')

def run_c3d_cpu(args, caffe_bin):
    load_original_driver()

    data_folder = os.path.abspath(args.dfolder)
    data_tmp_folder = os.path.join(data_folder, 'tmp')

    if not os.path.exists(data_tmp_folder):
        os.mkdir(data_tmp_folder)

    prototxt_root_folder = os.path.join(CWD, '..', 'examples', 'c3d_ucf101_training')
    template_file_path = os.path.join(prototxt_root_folder, 'train_simple.prototxt.template')
    prototxt_file_path = os.path.join(prototxt_root_folder, 'train_simple.prototxt')

    with open(os.path.join(args.rfolder, 'result-cpu.data'), 'w') as result_file:
        result_file.write('length,total_time (s)\n')

        with open(template_file_path, 'r') as f:
            template_content = f.read()
            template_content = template_content.replace('{{ INPUT_LAYER_TYPE }}', 'DragonMmapData')

            for length in (12, 24, 36, 48, 60, 72, 84,):
                print('Benchmarking C3D CPU with video length {} ...'.format(length))
                prototxt_content = template_content.replace('{{ LENGTH }}', str(length))
                prototxt_content = prototxt_content.replace('{{ INPUT_TRAIN_DATA }}', os.path.join(data_folder, 'c3d-train-data-{}.mem'.format(length)))
                prototxt_content = prototxt_content.replace('{{ INPUT_TRAIN_LABEL }}', os.path.join(data_folder, 'c3d-train-label-{}.mem'.format(length)))

                with open(prototxt_file_path, 'w') as g:
                    g.write(prototxt_content)

                clear_dmesg()
                clear_cache()

                start_timestamp = datetime.datetime.now()
                retcode = subprocess.call(
                    [caffe_bin, 'train', '--solver=solver_cpu.prototxt', '--enable_mmap=true', '--dragon_tmp_folder={}'.format(data_tmp_folder)],
                    cwd = prototxt_root_folder,
                    stdout = args.log,
                    stderr = args.log
                )
                end_timestamp = datetime.datetime.now()

                if retcode == 0:
                    print('Success. Writing result ...')
                    result_file.write('{},{}\n'.format(length, (end_timestamp - start_timestamp).total_seconds()))
                else:
                    raise Exception('Fail. This should never happen!!!')

def main(args):
    caffe_bin = os.path.join(CWD, '..', 'build', 'tools', 'caffe')
    if args.experiment == 'c3d':
        if args.prog == 'all':
            run_c3d_original(args, caffe_bin)
            run_c3d_uvm(args, caffe_bin)
            run_c3d_nvmgpu(args, caffe_bin)
            run_c3d_cpu(args, caffe_bin)
        elif args.prog == 'original':
            run_c3d_original(args, caffe_bin)
        elif args.prog == 'uvm':
            run_c3d_uvm(args, caffe_bin)
        elif args.prog == 'nvmgpu':
            run_c3d_nvmgpu(args, caffe_bin)
        elif args.prog == 'cpu':
            run_c3d_cpu(args, caffe_bin)
    else:
        raise NotImplementedError()

if __name__ == '__main__':
    main(parseargs())
    
